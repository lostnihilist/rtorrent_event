#!/usr/bin/python3.5

import argparse
import logging
import os
import tempfile
import time

from datetime import datetime
from pathlib import Path
from shutil import move

import bencode

# TODO:
# * daemon
# * don't run if rtorrent isn't running?
# * option to touch instead of move

LOGFILE = Path('~/.config/rtorrent_event/watch.log')
PIDFILE = Path("~/.local/var/run/rtorrent_watch.pid")


now = datetime.now

def parse_args_watch():
    p = argparse.ArgumentParser(
        description="Scan watch folders and rtorrent session, swapping unloaded files.")
    p.add_argument('session', action='store', type=str,
                   help="session file location")
    p.add_argument('watch', action='store', nargs='+',
                   help="rtorrent watch folder locations.")
    p.add_argument('-r', '--recursive', action='store_true',
                   help="find files to watch recursively.")
    p.add_argument('-d', '--daemon', action='store_true',
                   help="fork to a daemon. implies -q.")
    p.add_argument('-s', '--sleep', action='store', default=300, type=int,
       help="How long to sleep between path walks. "
            "Make sure to give time for rtorrent to scan. default: %(default)s.")
    p.add_argument("--min-age", action='store', default=600,
        help="How old must the last mod time be before we retouch. default: %(default)s.")
    p.add_argument("--new-name", action='store_true', default=False,
        help="When moving .torrent from /tmp to watch location, use new name. "
             "Helps in case a bad name is stopping rtorrent from reading, possibly.")
    p.add_argument("--tmp", action='store', type=str, default='/tmp',
        help="directory to use for tempfiles when swapping, defaults to /tmp")
    p.add_argument('-v', '--verbose', action='count', default=0,
                   help="Enable higher verbosity levels (up to 4 times).")
    p.add_argument('--log-file', action='store', type=Path, default=LOGFILE,
                   help="Where to store log output. default: %s" % str(LOGFILE))
    p.add_argument('--no-log', action='store_true',
                   help="do not write a log file.")
    p.add_argument('-q', '--quiet', action='store_true',
                   help="suppress output on stdout/stderr. Does not effect log file.")
    args = p.parse_args()
    args.session = Path(args.session).expanduser()
    args.watch = [Path(x).expanduser() for x in args.watch]
    args.tmp = Path(args.tmp).expanduser()
    if not args.session.is_dir():
        p.error("Session directory must exist and be a directory.")
    if not all(x.is_dir() for x in args.watch):
        p.error("Watch directories must exist and be directories.")
    if not args.tmp.is_dir():
        p.error("Temp directory must exist and be a directory.")
    args.log_file = args.log_file.expanduser() if not args.no_log else None
    return args

def walk_torrents(*watches, recursive=False, ext=".torrent"):
    """
        generator of Paths of suspected torrents in watches directories

        suspicion based on ext file extension, case insensitive
    """
    if recursive:
        for watch in watches:
            for pd, cds, fs, in os.walk(str(watch)):
                for file in (Path(pd, f) for f in fs):
                    if file.suffix.lower() == ext:
                        yield file
    else:
        for watch in watches:
            yield from (f for f in watch.iterdir() if f.is_file() and
                        f.suffix.lower() == ext)

def scan_torrent(*dirs, recursive=False, known_loaded=(), ext=".torrent"):
    known_loaded = set(known_loaded)
    yield from (f for f in walk_torrents(*dirs, recursive=recursive, ext=ext)
                if f in known_loaded or try_bread(f))

def scan_watch(*watches, recursive=False, known_loaded=()):
    """
        generator of Paths of valid torrents in watches directories

        skip reading files in known_loaded
    """
    logging.debug("scanning watch dirs %s" %
                  ','.join("'%s'" % str(x) for x in watches))
    yield from scan_torrent(*watches, recursive=recursive,
                            known_loaded=known_loaded)

def scan_session(session, known_loaded=()):
    """
        generator of Paths of watch files found in *.rtorrent files in session

        skip reading files in known_loaded
    """
    logging.debug("scanning session dir '%s'" % str(session))
    new_loaded = {}
    for rtor in scan_torrent(session, known_loaded=known_loaded, ext=".rtorrent"):
        if rtor in known_loaded:
            new_loaded[rtor] = known_loaded[rtor]
        else:
            tor = bencode.bread(rtor)
            watch = tor.get('tied_to_file')
            new_loaded[rtor] = Path(watch).expanduser() if watch else None
    return new_loaded

def try_bread(file):
    try:
        bencode.bread(file)
    except bencode.BencodeDecodeError:
        return False
    else:
        return True

def file_age(pth):
    return datetime.fromtimestamp(pth.stat().st_mtime)

def temp_path(suffix="", prefix="tmp", dir="/tmp"):
    "like mktemp, but returns a Path"
    return Path(tempfile.mktemp(suffix, prefix, str(dir)))

def move_to_tmp(src, suffix="", prefix="tmp", dir="/tmp"):
    """
        move src to a temporary directory dir, returns Path of destination.

        would be nice to know how to do this in a safe/atomic manner
    """
    tmp = temp_path(suffix=suffix, prefix=prefix, dir=str(dir))
    logging.debug("moving %s to %s" % (str(src), str(tmp)))
    move(str(src), str(tmp))
    return tmp

def setup_logging(args):
    formatter = logging.Formatter('%(asctime)s - %(levelname)s: %(message)s')
    rootlog = logging.getLogger()
    loglevel = logging.ERROR - 10 * args.verbose
    rootlog.setLevel(loglevel)
    if not args.quiet and not args.daemon:
        console = logging.StreamHandler()
        console.setFormatter(formatter)
        rootlog.addHandler(console)
    if args.log_file:
        logfile = logging.FileHandler(str(args.log_file))
        logfile.setFormatter(formatter)
        rootlog.addHandler(logfile)
    if args.quiet and not args.log_file:
        rootlog.disabled = True

def main(args):
    setup_logging(args)
    torrents_in_session = {}
    move_pair = {}
    while True:
        torrents_in_watch = set(scan_watch(*args.watch, recursive=args.recursive,
                                           known_loaded=torrents_in_session))
        torrents_in_session = scan_session(args.session, torrents_in_session)
        for watchf in torrents_in_watch - set(torrents_in_session.values()):
            if (now() - file_age(watchf)).total_seconds() > args.min_age:
                logging.info("'tmp' %s" % str(watchf), end="")
                tmp = move_to_tmp(watchf, dir=args.tmp)
                move_pair[watchf] = tmp
                logging.info(" to '%s'" % str(tmp))
        for watchf, tmpf in list(move_pair.items()): # allows del during iter
            dest = temp_path(dir=watchf.parent) if args.new_name else watchf
            if dest == watchf:
                logging.info("'%s' from '%s'" % (str(dest), str(tmpf)))
            else:
                logging.info("'%s' from '%s' originally '%s'" % (str(dest),
                                                        str(tmpf), str(watchf)))
            move(str(tmpf), str(dest))
            del move_pair[watchf]
        logging.debug("Sleeping for %d" % args.sleep)
        time.sleep(args.sleep) # sleep after move back to allow rt to read

if __name__ == "__main__":
    args = parse_args_watch()
    if args.daemon:
        from daemons import daemonizer
        dmain = daemonizer.run(pidfile=str(PIDFILE.expanduser()))(main)
        dmain(args)
    else:
        main(args)

